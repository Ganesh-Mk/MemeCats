 const handleSubmit = async () => {
    // router.push("../(tabs)/reels");

    if (!email || !password) {
      Toast.show({
        type: "error",
        text1: "All fields are required",
        text2: "Please fill in all the fields",
      });
      return;
    }

    setLoading(true);

    try {
      const response = await fetch(`${BACKEND_URL}/login`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ email, password }),
      });

      const data = await response.json();

      if (response.ok) {
        router.push("../(tabs)/reels");
        Toast.show({
          type: "success",
          text1: "Welcome Back!",
          text2: "Happy to see you again ðŸ‘‹",
        });

        dispatch(storeId(data.user._id));
        dispatch(storeName(data.user.name));
        dispatch(storeEmail(data.user.email));
        dispatch(storeProfileImage(data.user.profileImage));
        dispatch(storeReels(data.user.reels));

        try {
          await AsyncStorage.clear();
          await AsyncStorage.setItem("id", data.user._id);
          await AsyncStorage.setItem("name", data.user.name);
          await AsyncStorage.setItem("email", data.user.email);
          await AsyncStorage.setItem("profileImage", data.user.profileImage);
          await AsyncStorage.setItem("reels", JSON.stringify(data.user.reels));
        } catch (error) {
          console.error("Error saving data on login", error);
        }
      } else {
        Toast.show({
          type: "error",
          text1: "Login Failed",
          text2: data.message || "Invalid email or password.",
        });
      }
    } catch (error) {
      console.error("Network Error:", error);
      Toast.show({
        type: "error",
        text1: "Network Error",
        text2: "Please check your internet connection.",
      });
    } finally {
      setLoading(false);
    }
  };